---

- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vault.yml
    - vars/main.yml

  tasks:

  - name: Ensure a security group with correct ingress/egress rules are in place
    ec2_group:
      name: "{{ ec2_security_group }}"
      description: Security Group for Git Servers
      region: "{{ ec2_region }}"
      aws_access_key: "{{ ec2_access_key }}"
      aws_secret_key: "{{ ec2_secret_key }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Provision the systems which are to be managed with Ansible
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: t2.medium
      image: "{{ ami_id }}"
      wait: true
      exact_count: 1
      count_tag:
        identity: git
      instance_tags:
        identity: git
    register: githost

  - name: Wait for SSH to come up
    local_action: wait_for
                  host="{{ item.public_ip }}"
                  port=22
                  state=started
    with_items: "{{ githost.instances }}"

  - name: Add all instance public IPs to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groups: git
      ansible_user: ec2-user
      ansible_become: true
      fqdn: "{{item.public_dns_name}}"
    with_items: "{{ githost.tagged_instances }}"

  - name: Print fqdn of Git server
    debug:
      msg: "{{ item.public_dns_name }}"
    with_items: "{{ githost.tagged_instances }}"

  - name: Print IP address of Git server
    debug:
      msg: "{{ groups['git'] }}"
